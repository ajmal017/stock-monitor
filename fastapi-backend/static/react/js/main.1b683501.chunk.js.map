{"version":3,"sources":["Header.js","StockChart.js","StockDetailsModal.js","StockTable.js","AddStockForm.js","App.js","serviceWorker.js","index.js"],"names":["StockHeader","Header","as","icon","textAlign","Icon","name","circular","Content","StockChart","historicalData","loading","style","height","Segment","Dimmer","active","inverted","Loader","size","indeterminate","margin","top","right","bottom","left","enableSlices","data","xScale","type","format","useUTC","precision","xFormat","yScale","min","max","stacked","reverse","axisLeft","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisBottom","tickValues","sliceTooltip","slice","background","padding","border","points","xFormatted","map","point","key","id","color","serieColor","serieId","yFormatted","colors","scheme","pointSize","pointBorderWidth","pointBorderColor","from","modifiers","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","lineWidth","StockDetailsModal","stock","openModal","setOpenModal","useState","setHistoricalData","setLoading","useEffect","fetch","method","then","res","json","Modal","closeIcon","onClose","open","centered","className","symbol","Description","StockTable","update","setUpdate","newStockEntry","setNewStockEntry","isFirstRender","useRef","selectedStock","setSelectedStock","current","Table","celled","selectable","Row","HeaderCell","Body","onClick","handleSelectRow","Cell","price","ma50","ma200","forward_pe","forward_eps","dividend_yield","AddStockForm","setStock","Form","onSubmit","e","preventDefault","add_stock_request","body","JSON","stringify","Group","Input","data-parse","placeholder","value","onChange","target","Button","action","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"js/main.1b683501.chunk.js","sourcesContent":["import React from 'react';\nimport { Header, Icon } from 'semantic-ui-react';\n\nconst StockHeader = () => (\n    <div>\n        <Header as='h1' icon textAlign='center'>\n            < Icon name='line chart' circular />\n            <Header.Content>Stock Monitor</Header.Content>\n        </Header >\n    </div >\n);\n\nexport default StockHeader;\n","import React from 'react';\nimport { ResponsiveLine } from '@nivo/line';\nimport { Dimmer, Loader, Segment } from 'semantic-ui-react';\n\n\nconst StockChart = ({ historicalData, loading }) => {\n    if (loading) {\n        return (\n            <div style={{ height: 600 }}>\n                <Segment>\n                    <Dimmer active inverted>\n                        <Loader size='large' inverted indeterminate>Fetching Historical Data...</Loader>\n                    </Dimmer>\n                </Segment>\n            </div>\n        );\n    } else {\n        return (\n            <div style={{ height: 600 }}>\n                <ResponsiveLine\n                    margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                    enableSlices='x'\n                    data={historicalData}\n                    xScale={{\n                        type: 'time',\n                        format: '%Y-%m-%d',\n                        useUTC: false,\n                        precision: 'day',\n                    }}\n                    xFormat='time:%Y-%m-%d'\n                    yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: false, reverse: false }}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Closing Price ($)',\n                        legendOffset: -40,\n                        legendPosition: 'middle'\n                    }}\n                    axisBottom={{\n                        format: '%b %Y',\n                        tickValues: 'every month',\n                        orient: 'bottom',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 30,\n                        legendPosition: 'middle'\n                    }}\n                    sliceTooltip={({ slice }) => (\n                        <div\n                            style={{\n                                background: 'white',\n                                padding: '9px 12px',\n                                border: '1px solid #ccc',\n                            }}\n                        >\n                            <h4>{slice.points[0].data.xFormatted}</h4>\n                            {slice.points.map(point => (\n                                <div\n                                    key={point.id}\n                                    style={{\n                                        color: point.serieColor,\n                                        padding: '3px 0',\n                                    }}\n                                >\n                                    <strong>{point.serieId}</strong>: {point.data.yFormatted}\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                    colors={{ scheme: 'category10' }}\n                    pointSize={2}\n                    pointBorderWidth={1}\n                    pointBorderColor={{\n                        from: 'color',\n                        modifiers: [['darker', 0.3]],\n                    }}\n                    useMesh={true}\n                    legends={[\n                        {\n                            anchor: 'bottom-right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 100,\n                            translateY: 0,\n                            itemsSpacing: 0,\n                            itemDirection: 'left-to-right',\n                            itemWidth: 80,\n                            itemHeight: 20,\n                            itemOpacity: 0.75,\n                            symbolSize: 12,\n                            symbolShape: 'circle',\n                            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemBackground: 'rgba(0, 0, 0, .03)',\n                                        itemOpacity: 1\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                    lineWidth={1}\n                />\n            </div>\n        );\n    }\n};\n\nexport default StockChart;","import React, { useState, useEffect } from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport StockChart from './StockChart';\n\nconst StockDetailsModal = ({ stock, openModal, setOpenModal }) => {\n    const [historicalData, setHistoricalData] = useState({});\n    const [loading, setLoading] = useState(true);\n\n    const handleCloseModal = () => {\n        setOpenModal(false);\n    };\n\n    useEffect(() => {\n        if (stock.id) {\n            const get_historical_request = {\n                method: 'GET',\n            };\n            fetch(`/stocks/${stock.id}/historical`, get_historical_request).then(res => res.json()).then(data => {\n                setHistoricalData(data);\n                setLoading(false);\n            });\n        }\n    }, [stock]);\n\n    return (\n        <Modal size='large' closeIcon onClose={handleCloseModal} open={openModal} centered={false}>\n            <Modal.Header className='ui icon center aligned header'>{stock.symbol} Stock Historical Data</Modal.Header>\n            <Modal.Content>\n                <Modal.Description>\n                    <StockChart historicalData={historicalData} loading={loading} />\n                </Modal.Description>\n            </Modal.Content>\n        </Modal >\n    );\n};\n\nexport default StockDetailsModal;","import React, { useEffect, useState, useRef } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport StockDetailsModal from './StockDetailsModal';\n\nconst StockTable = ({ update, setUpdate, newStockEntry, setNewStockEntry }) => {\n\n    const isFirstRender = useRef(true);\n    const [openModal, setOpenModal] = useState(false);\n    const [selectedStock, setSelectedStock] = useState({});\n\n    useEffect(() => {\n        if (update || isFirstRender) {\n            if (isFirstRender) {\n                isFirstRender.current = false;\n            }\n            const get_stocks_request = {\n                method: 'GET',\n            };\n            fetch('/stocks', get_stocks_request).then(res => res.json()).then(data => {\n                setNewStockEntry(data);\n                setUpdate(false);\n            });\n        }\n    }, [update, setUpdate, setNewStockEntry]);\n\n    const handleSelectRow = (stock) => {\n        setSelectedStock(stock);\n        setOpenModal(true);\n    };\n\n    return (\n        <div>\n            < Table celled selectable>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Symbol</Table.HeaderCell>\n                        <Table.HeaderCell>Price</Table.HeaderCell>\n                        <Table.HeaderCell>50 Day Moving Average</Table.HeaderCell>\n                        <Table.HeaderCell>200 Day Moving Average</Table.HeaderCell>\n                        <Table.HeaderCell>Forward Price to Earnings Ratio</Table.HeaderCell>\n                        <Table.HeaderCell>Forward Earnings per Share</Table.HeaderCell>\n                        <Table.HeaderCell>Dividend Yield</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {newStockEntry.map(stock => (\n                        <Table.Row onClick={() => handleSelectRow(stock)}>\n                            <Table.Cell>{stock.symbol}</Table.Cell>\n                            <Table.Cell>{stock.price}</Table.Cell>\n                            <Table.Cell>{stock.ma50}</Table.Cell>\n                            <Table.Cell>{stock.ma200}</Table.Cell>\n                            <Table.Cell>{stock.forward_pe}</Table.Cell>\n                            <Table.Cell>{stock.forward_eps}</Table.Cell>\n                            <Table.Cell>{stock.dividend_yield}</Table.Cell>\n                        </Table.Row>\n                    ))}\n                </Table.Body>\n            </Table >\n            <StockDetailsModal stock={selectedStock} openModal={openModal} setOpenModal={setOpenModal} />\n        </div >\n    );\n};\n\nexport default StockTable;","import React, { useState } from 'react';\nimport { Button, Input, Form } from 'semantic-ui-react';\n\nconst AddStockForm = ({ update, setUpdate }) => {\n    const [stock, setStock] = useState('');\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const add_stock_request = {\n            method: 'POST',\n            body: JSON.stringify({\n                symbol: stock\n            })\n        };\n        fetch('/stocks', add_stock_request);\n        setStock('');\n        setUpdate(true);\n    };\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Group>\n                <Input type=' text' data-parse='uppercase'\n                    placeholder='Add Stock...' value={stock}\n                    onChange={e => setStock(e.target.value)} />\n                {update ? <Button loading>Loading</Button> : <Button action='submit'>Submit</Button>}\n            </Form.Group>\n        </Form>\n    );\n};\n\nexport default AddStockForm;\n","import React, { useState } from 'react';\nimport './App.css'\nimport StockHeader from './Header.js';\nimport StockTable from './StockTable.js';\nimport AddStockForm from './AddStockForm';\n\nfunction App() {\n  const [update, setUpdate] = useState(false);\n  const [newStockEntry, setNewStockEntry] = useState([]);\n\n  return (\n    <div className='ui container center aligned'>\n      <StockHeader />\n      <AddStockForm update={update} setUpdate={setUpdate} />\n      <StockTable update={update} setUpdate={setUpdate}\n        newStockEntry={newStockEntry} setNewStockEntry={setNewStockEntry} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}